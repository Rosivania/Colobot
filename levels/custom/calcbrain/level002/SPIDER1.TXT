extern void object::Attack( )
{
	int		listfirst[], j;
	int		list[], i;
	object	p;	
	point		center;	
	float	dist, prox;
	point	dest;
	point		lastPos;
	point           truecenter;	
	float		distCent;	
	float		r;	

	errmode(0); 
	while ( ismovie() != 0 )  wait(1);


	j = 0;
listfirst[j++] = WingedShooter;
listfirst[j++] = TrackedShooter;
listfirst[j++] = WheeledShooter;
listfirst[j++] = LeggedShooter;
listfirst[j++] = WingedOrgaShooter;
listfirst[j++] = TrackedOrgaShooter;
listfirst[j++] = WheeledOrgaShooter;
listfirst[j++] = LeggedOrgaShooter;
listfirst[j++] = Me;


i = 0;
	list[i++] = WingedGrabber;
	list[i++] = TrackedGrabber;
	list[i++] = WheeledGrabber;
	list[i++] = LeggedGrabber;
	list[i++] = WingedShooter;
	list[i++] = TrackedShooter;
	list[i++] = WheeledShooter;
	list[i++] = LeggedShooter;
	list[i++] = WingedOrgaShooter;
	list[i++] = TrackedOrgaShooter;
	list[i++] = WheeledOrgaShooter;
	list[i++] = LeggedOrgaShooter;
	list[i++] = WingedSniffer;
	list[i++] = TrackedSniffer;
	list[i++] = WheeledSniffer;
	list[i++] = LeggedSniffer;
	list[i++] = Thumper;
	list[i++] = PhazerShooter;
	list[i++] = Recycler;
	list[i++] = Shielder;
	list[i++] = Subber;
	list[i++] = Derrick;
	list[i++] = BotFactory;
	list[i++] = PowerStation;
	list[i++] = Converter;
	list[i++] = RepairCenter;
	list[i++] = DefenseTower;
	list[i++] = ResearchCenter;
	list[i++] = RadarStation;
	list[i++] = ExchangePost;
	list[i++] = PowerPlant;
	list[i++] = AutoLab;
	list[i++] = NuclearPlant;


	center = position;
	truecenter = position;		
				
	distCent = 35; 	

	lastPos = position;	
	motor(1,1);			
	while ( true )		
	{
		if(rand()<0.04)
		{
			center.x = center.x + rand()*200 - 100;
			center.y = center.y + rand()*200 - 100;
		}
		if(rand()<0.2)
		{
			center = truecenter;
		}
		p= radar(listfirst, 0, 360, 0, 60);
		if (p == null)
		p= radar(list, 0, 360, 0, 40);
		if (p == null or topo(position)<0)
		{                                      
			if (distance2d(position, center) > distCent or topo(position)<0)
			{   
				motor(0, 0);
				wait(0.5);  
				motor (-0.5, -0.5);
				wait (1.5);
				turn(direction(center));
				motor (1, 1);
				do 
				{
					lastPos = position;
					wait(0.5); 
					if (distance2d(lastPos, position) < 0.2)
					{  
						turn(rand()*360-180);
						motor(1,1);
						wait(1);
						turn(direction(center));
					}
				}
				while (distance2d(position, center) > distCent or topo(position)<0);
			}
			else
			{  
				if (distance2d(lastPos, position) < 0.2)
				{ 
					turn(rand()*360-180);
					motor(1,1);
					wait(1);
					if (rand() < 0.6)
					{  
						motor (0, 0);
						wait(rand()*3);
						motor (1, 1);  
					}   
				}
				r = rand();
				if (r > 0.6)
				{ 
					motor (1, 0.7);
					wait(rand()*3);
					motor (1, 1); 
				}
				if (r < 0.4)
				{  
					motor (0.7, 1);
					wait(rand()*3);
					motor (1, 1);  
				}
				
				wait(1);     

				lastPos = position;
			}
		}






		else
		{
			dist = distance(p.position, position);
			if ( dist <= 3.5 )
			{
				fire();
			}
			else
			{
				
				prox = dist-5;
				if ( prox > 25 )  prox = 25;
				dest.x = (position.x-p.position.x)*prox/dist + p.position.x;
				dest.y = (position.y-p.position.y)*prox/dist + p.position.y;
				dest.z = (position.z-p.position.z)*prox/dist + p.position.z;
				goto(dest);
				if(rand()<0.03)
				{
					turn(rand()*180-90);
					motor(1,1);            
					wait(0.3+rand()*1);
				}    
			}
		}
	}
}